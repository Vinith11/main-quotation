import React, { useState } from "react";
import "../CustomCss/Clientinfo.css";
import { dbid, cid } from "../Config/dbconfig";
import { databases } from "../Config/config";
import { useEffect } from "react";
import { Query } from "appwrite";
import Main from "../components/Main";

export default function Clientinfo() {
  const [modelNameSuggestions, setModelNameSuggestions] = useState([]);
  const [userStartedTypingModel, setUserStartedTypingModel] = useState(false);
  const [showCompanySuggestion, setshowCompanySuggestion] = useState(false);
  const [showModelSuggestion, setshowModelSuggestion] = useState(false);
  const [nextComponent, setnextComponent] = useState(false);

  const [clientInfo, setclientInfo] = useState({
    companyName: "",
    address: "",
    phone: "",
    email: "",
    autoGeneratedRef: generateAutoRef(),
    currentDate: getFormattedDate(),
  });

  const [generatorInfo, setGeneratorInfo] = useState({
    generatorCompany: "",
    modelName: "",
    controller: "",
    actuator: "",
    breaker: "",
    price: "",
    description:
      "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Repudiandae, laudantium animi molestiae totam dolorum velit veritatis cumque natus qui quo. Provident, mollitia quibusdam? Esse quidem explicabo tempore sed optio ab itaque?Lorem ipsum dolor sit, amet consectetur adipisicing elit. Repudiandae, laudantium animi molestiae totam dolorum velit veritatis cumque natus qui quo. Provident, mollitia quibusdam? Esse quidem explicabo tempore sed optio ab itaque?",
    remark: "",
  });

  const [companyNameSuggestions, setcompanyNameSuggestions] = useState([]);
  const [userStartedTyping, setUserStartedTyping] = useState(false);

  //   co

  const fetchComapanySuggestions = async (value) => {
    setshowCompanySuggestion(true);
    try {
      const response = await databases.listDocuments(dbid, cid, [
        Query.startsWith("generatorCompany", value),
        Query.select(["generatorCompany"]),
      ]);

      const suggestions = response.documents.map((doc) => doc.generatorCompany);
      const uniqueSuggestions = Array.from(new Set(suggestions));
      setcompanyNameSuggestions(uniqueSuggestions);
    } catch (error) {
      console.error("Error fetching controller suggestions:", error);
    }
  };

  useEffect(() => {
    if (userStartedTyping && generatorInfo.generatorCompany.length > 0) {
      if (!companyNameSuggestions.includes(generatorInfo.generatorCompany)) {
        if (generatorInfo.generatorCompany.length === 0) {
          setcompanyNameSuggestions([]);
        } else {
          setshowCompanySuggestion(true);
          fetchComapanySuggestions(generatorInfo.generatorCompany);
        }
      }
    }
  }, [generatorInfo.generatorCompany, userStartedTyping]);

  //   mo

  const fetchModelSuggestions = async (value) => {
    if (generatorInfo.generatorCompany.length === 0) {
      try {
        setshowModelSuggestion(true);
        const response = await databases.listDocuments(dbid, cid, [
          Query.startsWith("modelName", value),
          Query.select(["modelName"]),
        ]);

        const suggestions = response.documents.map((doc) => doc.modelName);
        setModelNameSuggestions(suggestions);
      } catch (error) {
        console.error("Error fetching model name suggestions:", error);
      }
    } else {
      try {
        setshowModelSuggestion(true);

        const response = await databases.listDocuments(dbid, cid, [
          Query.startsWith("generatorCompany", generatorInfo.generatorCompany),
          Query.startsWith("modelName", value),
          Query.select(["modelName"]),
        ]);

        const suggestions = response.documents.map((doc) => doc.modelName);
        setModelNameSuggestions(suggestions);
      } catch (error) {
        console.error("Error fetching model name suggestions:", error);
      }
    }
  };

  const fetchModelSuggestionsfromcompany = async (value) => {
    try {
      setshowModelSuggestion(true);
      const response = await databases.listDocuments(dbid, cid, [
        Query.startsWith("generatorCompany", generatorInfo.generatorCompany),
        Query.startsWith("modelName", value),
        Query.select(["modelName"]),
      ]);

      const suggestions = response.documents.map((doc) => doc.modelName);
      setModelNameSuggestions(suggestions);
    } catch (error) {
      console.error("Error fetching model name suggestions:", error);
    }
  };

  useEffect(() => {
    if (userStartedTypingModel && generatorInfo.modelName.length > 0) {
      if (!modelNameSuggestions.includes(generatorInfo.modelName)) {
        fetchModelSuggestions(generatorInfo.modelName);
      }
    }
  }, [generatorInfo.modelName, userStartedTypingModel]);

  const handleChange = (field, value) => {
    setclientInfo({ ...clientInfo, [field]: value });
  };

  const handleChangeGeneratorInfo = (field, value) => {
    setGeneratorInfo({ ...generatorInfo, [field]: value });
    if (!userStartedTyping) {
      setUserStartedTyping(true);
    }
    if (!userStartedTypingModel && field === "modelName") {
      setUserStartedTypingModel(true);
    }
  };


  const setControllerAndActuator = async (modelName) => {
    const response = await databases.listDocuments(dbid, cid, [
      Query.equal("modelName", modelName),
    ]);

    setGeneratorInfo({
      ...generatorInfo,
      generatorCompany: response.documents[0].generatorCompany,
      modelName: modelName,
      controller: response.documents[0].contoroler,
      actuator: response.documents[0].actuator,
    });
  };

  // Inside your component function
  const [showControllerSuggestion, setShowControllerSuggestion] =
    useState(false);
  const [controllerSuggestions, setControllerSuggestions] = useState([
    "DSE 7320 MK II",
    "DSE 4520 MK II",
    "DEIF SGC 420",
    "DEIF SGC 120",
    "SEDEMAC",
  ]);

  const handleControllerFocus = () => {
    setShowControllerSuggestion(true);
  };

  const handleControllerSelection = (suggestion) => {
    setGeneratorInfo({
      ...generatorInfo,
      controller: suggestion,
    });
    setShowControllerSuggestion(false);
  };

  return (
    <>
      {nextComponent ? (
        <Main clientInfo={clientInfo} generatorInfo={generatorInfo} />
      ) : (
        <div className="client-info-container">
          <h2 className="form-heading">Quotation form</h2>
          <br />

          <div className="form-field">
            <label htmlFor="companyName" className="field-label">
              Company/Client Name:
            </label>
            <input
              type="text"
              id="companyName"
              value={clientInfo.companyName}
              onChange={(e) => handleChange("companyName", e.target.value)}
              className="field-input"
            />
          </div>

          <div className="form-field">
            <label htmlFor="address" className="field-label">
              Address:
            </label>
            <input
              type="text"
              id="address"
              value={clientInfo.address}
              onChange={(e) => handleChange("address", e.target.value)}
              className="field-input"
            />
          </div>

          <div className="form-field">
            <label htmlFor="phone" className="field-label">
              Phone:
            </label>
            <input
              type="tel"
              id="phone"
              value={clientInfo.phone}
              onChange={(e) => handleChange("phone", e.target.value)}
              className="field-input"
            />
          </div>

          <div className="form-field">
            <label htmlFor="email" className="field-label">
              Email:
            </label>
            <input
              type="email"
              id="email"
              value={clientInfo.email}
              onChange={(e) => handleChange("email", e.target.value)}
              className="field-input"
            />
          </div>
          <div className="form-field">
            <label className="field-label">Date:</label>
            <span className="field-span">{clientInfo.currentDate}</span>
          </div>

          <br />
          <br />
          <h2 className="form-heading">Generator Information</h2>

          <br />
          <br />

          <div className="form-field">
            <label htmlFor="generatorCompany" className="field-label">
              Generator Company:
            </label>
            <input
              type="text"
              id="generatorCompany"
              value={generatorInfo.generatorCompany}
              onChange={(e) =>
                handleChangeGeneratorInfo("generatorCompany", e.target.value)
              }
              className="field-input"
            />
            <br />

            {showCompanySuggestion &&
              generatorInfo.generatorCompany.length > 0 && (
                <ul className="mt-2 max-h-32 overflow-y-auto border border-gray-300 rounded-md shadow-md">
                  {companyNameSuggestions.map((suggestion, index) => (
                    <li
                      key={index}
                      onClick={() => {
                        setshowCompanySuggestion(false);

                        setGeneratorInfo({
                          ...generatorInfo,
                          generatorCompany: suggestion,
                        });
                        fetchModelSuggestionsfromcompany(
                          generatorInfo.modelName
                        );
                      }}
                      className="cursor-pointer py-2 px-3 hover:bg-gray-100 bg-gray-50"
                    >
                      {suggestion}
                    </li>
                  ))}
                </ul>
              )}
          </div>

          <div className="form-field">
            <label htmlFor="modelName" className="field-label">
              Model Name:
            </label>
            <input
              type="text"
              id="modelName"
              value={generatorInfo.modelName}
              onChange={(e) =>
                handleChangeGeneratorInfo("modelName", e.target.value)
              }
              className="field-input"
            />

            {showModelSuggestion && (
              <ul className="mt-2 max-h-32 overflow-y-auto border border-gray-300 rounded-md shadow-md">
                {modelNameSuggestions.map((suggestion, index) => (
                  <li
                    key={index}
                    onClick={() => {
                      setshowModelSuggestion(false);
                      setControllerAndActuator(suggestion);
                    }}
                    className="cursor-pointer py-2 px-3 hover:bg-gray-100 bg-gray-50"
                  >
                    {suggestion}
                  </li>
                ))}
              </ul>
            )}
          </div>

          <div className="form-field">
            <label htmlFor="controller" className="field-label">
              Controller:
            </label>
            <input
              type="text"
              id="controller"
              value={generatorInfo.controller}
              onChange={(e) =>
                handleChangeGeneratorInfo("controller", e.target.value)
              }
              onFocus={handleControllerFocus} // Add onFocus event handler
              className="field-input"
            />
            {showControllerSuggestion && (
              <ul className="mt-2 max-h-32 overflow-y-auto border border-gray-300 rounded-md shadow-md">
                {controllerSuggestions.map((suggestion, index) => (
                  <li
                    key={index}
                    onClick={() => handleControllerSelection(suggestion)}
                    className="cursor-pointer py-2 px-3 hover:bg-gray-100 bg-gray-50"
                  >
                    {suggestion}
                  </li>
                ))}
              </ul>
            )}
          </div>

          <div className="form-field">
            <label htmlFor="actuator" className="field-label">
              Actuator:
            </label>
            <input
              type="text"
              id="actuator"
              value={generatorInfo.actuator}
              onChange={(e) =>
                handleChangeGeneratorInfo("actuator", e.target.value)
              }
              className="field-input"
            />
          </div>

          <div className="form-field">
            <label htmlFor="breaker" className="field-label">
              Breaker:
            </label>
            <select
              id="breaker"
              value={generatorInfo.breaker}
              onChange={(e) =>
                handleChangeGeneratorInfo("breaker", e.target.value)
              }
              className="field-input"
            >
              <option value="">Select Option</option>
              <option value="Yes">Yes</option>
              <option value="No">No</option>
            </select>
            {generatorInfo.breaker === "Yes" && (
              <div className="form-field">
                <label htmlFor="breakerOption" className="field-label">
                  Breaker Option:
                </label>
                <input
                  type="text"
                  id="breakerOption"
                  value={generatorInfo.breakerOption}
                  onChange={(e) =>
                    handleChangeGeneratorInfo("breakerOption", e.target.value)
                  }
                  className="field-input"
                />
              </div>
            )}
          </div>

          <div className="form-field">
            <label htmlFor="price" className="field-label">
              Price:
            </label>
            <input
              type="text"
              id="price"
              value={generatorInfo.price}
              onChange={(e) =>
                handleChangeGeneratorInfo("price", e.target.value)
              }
              className="field-input"
            />
          </div>

          <div className="form-field">
            <label htmlFor="remark" className="field-label">
              Remark:
            </label>
            <textarea
              id="remark"
              value={generatorInfo.remark}
              onChange={(e) =>
                handleChangeGeneratorInfo("remark", e.target.value)
              }
              className="field-input"
            ></textarea>
          </div>

          <button
            className="py-2 px-4 bg-blue-500 text-white rounded-md shadow-md hover:bg-blue-600 transition-colors"
            onClick={() => setnextComponent(true)}
          >
            Click me
          </button>
        </div>
      )}
    </>
  );
}

function getFormattedDate() {
  const today = new Date();
  const dd = String(today.getDate()).padStart(2, "0");
  const mm = String(today.getMonth() + 1).padStart(2, "0");
  const yyyy = today.getFullYear();

  return `${dd}/${mm}/${yyyy}`;
}

function generateAutoRef() {
  return Math.floor(Math.random() * 1000000);
}
